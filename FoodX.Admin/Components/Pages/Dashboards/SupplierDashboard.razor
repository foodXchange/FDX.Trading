@page "/dashboard/supplier"
@using FoodX.Admin.Data
@using FoodX.Admin.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@inject FoodXDbContext DbContext
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize(Roles = "Seller,Supplier,Admin,SuperAdmin")]
@rendermode InteractiveServer

<PageTitle>Supplier Dashboard - FoodX</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h3" GutterBottom="true">
                <MudIcon Icon="@Icons.Material.Filled.LocalShipping" Class="mr-2" Style="vertical-align: middle;" />
                Supplier Dashboard
            </MudText>
            <MudText Typo="Typo.body1" Class="mb-4">Manage your products, connect with buyers, and grow your business</MudText>
        </MudItem>

        <!-- Key Metrics -->
        <MudItem xs="12" sm="6" md="3">
            <MudCard>
                <MudCardContent>
                    <MudIcon Icon="@Icons.Material.Filled.Category" Color="Color.Primary" Style="font-size: 3rem;" />
                    <MudText Typo="Typo.h4" Class="mt-2">@_myProductsCount</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary">My Products</MudText>
                    <MudText Typo="Typo.caption" Color="Color.Success">@_activeProductsCount active</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudCard>
                <MudCardContent>
                    <MudIcon Icon="@Icons.Material.Filled.Groups" Color="Color.Success" Style="font-size: 3rem;" />
                    <MudText Typo="Typo.h4" Class="mt-2">@_connectedBuyers</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary">Connected Buyers</MudText>
                    <MudText Typo="Typo.caption">@_newBuyersThisWeek new this week</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudCard>
                <MudCardContent>
                    <MudIcon Icon="@Icons.Material.Filled.RequestQuote" Color="Color.Warning" Style="font-size: 3rem;" />
                    <MudText Typo="Typo.h4" Class="mt-2">@_pendingQuotes</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary">Pending Quotes</MudText>
                    <MudText Typo="Typo.caption" Color="Color.Warning">Respond within 24h</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudCard>
                <MudCardContent>
                    <MudIcon Icon="@Icons.Material.Filled.Visibility" Color="Color.Info" Style="font-size: 3rem;" />
                    <MudText Typo="Typo.h4" Class="mt-2">@_productViews</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary">Product Views</MudText>
                    <MudText Typo="Typo.caption">This month</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Quick Actions -->
        <MudItem xs="12" md="6">
            <MudPaper Class="pa-4 mt-4">
                <MudText Typo="Typo.h5" GutterBottom="true">Quick Actions</MudText>
                <MudGrid Class="mt-3">
                    <MudItem xs="12" sm="6">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" 
                                   FullWidth="true" Href="/products/add">
                            Add New Product
                        </MudButton>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Inventory" 
                                   FullWidth="true" Href="/products/manage">
                            Manage Inventory
                        </MudButton>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Reply" 
                                   FullWidth="true" Href="/quotes/respond">
                            Respond to Quotes
                        </MudButton>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudButton Variant="Variant.Filled" Color="Color.Warning" StartIcon="@Icons.Material.Filled.Analytics" 
                                   FullWidth="true" Href="/analytics">
                            View Analytics
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>

        <!-- Product Performance -->
        <MudItem xs="12" md="6">
            <MudPaper Class="pa-4 mt-4">
                <MudText Typo="Typo.h5" GutterBottom="true">Top Performing Products</MudText>
                @if (_topProducts.Any())
                {
                    <MudList T="string">
                        @foreach (var product in _topProducts)
                        {
                            <MudListItem T="string" Icon="@Icons.Material.Filled.TrendingUp">
                                <div class="d-flex justify-space-between align-center">
                                    <div>
                                        <MudText Typo="Typo.body1">@product.Name</MudText>
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                                            @product.Category - Stock: @product.StockQuantity @product.Unit
                                        </MudText>
                                    </div>
                                    <MudChip T="string" Color="Color.Success" Size="Size.Small">
                                        $@product.Price
                                    </MudChip>
                                </div>
                            </MudListItem>
                        }
                    </MudList>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Secondary">Add products to see performance</MudText>
                }
            </MudPaper>
        </MudItem>

        <!-- Recent Quote Requests -->
        <MudItem xs="12">
            <MudPaper Class="pa-4 mt-4">
                <MudText Typo="Typo.h5" GutterBottom="true">Recent Quote Requests</MudText>
                <MudSimpleTable Hover="true" Bordered="true" Striped="true">
                    <thead>
                        <tr>
                            <th>Buyer</th>
                            <th>Product</th>
                            <th>Quantity</th>
                            <th>Requested Date</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>ABC Restaurant Chain</td>
                            <td>Organic Tomatoes</td>
                            <td>500 kg</td>
                            <td>@DateTime.Now.AddDays(-1).ToString("MMM dd")</td>
                            <td><MudChip T="string" Color="Color.Warning" Size="Size.Small">Pending</MudChip></td>
                            <td>
                                <MudButton Variant="Variant.Text" Color="Color.Primary" Size="Size.Small">Respond</MudButton>
                            </td>
                        </tr>
                        <tr>
                            <td>XYZ Supermarket</td>
                            <td>Fresh Lettuce</td>
                            <td>200 kg</td>
                            <td>@DateTime.Now.AddDays(-2).ToString("MMM dd")</td>
                            <td><MudChip T="string" Color="Color.Success" Size="Size.Small">Quoted</MudChip></td>
                            <td>
                                <MudButton Variant="Variant.Text" Color="Color.Default" Size="Size.Small">View</MudButton>
                            </td>
                        </tr>
                    </tbody>
                </MudSimpleTable>
            </MudPaper>
        </MudItem>

        <!-- Inventory Alerts -->
        <MudItem xs="12" md="6">
            <MudPaper Class="pa-4 mt-4">
                <MudText Typo="Typo.h5" GutterBottom="true">Inventory Alerts</MudText>
                @if (_lowStockProducts.Any())
                {
                    @foreach (var product in _lowStockProducts)
                    {
                        <MudAlert Severity="Severity.Warning" Class="mb-2">
                            <MudText Typo="Typo.body2">
                                <strong>@product.Name</strong> - Low stock: @product.StockQuantity @product.Unit remaining
                            </MudText>
                        </MudAlert>
                    }
                }
                else
                {
                    <MudAlert Severity="Severity.Success">
                        All products have sufficient stock levels
                    </MudAlert>
                }
            </MudPaper>
        </MudItem>

        <!-- Business Tips -->
        <MudItem xs="12" md="6">
            <MudPaper Class="pa-4 mt-4">
                <MudText Typo="Typo.h5" GutterBottom="true">Business Growth Tips</MudText>
                <MudList T="string">
                    <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle">
                        <MudText Typo="Typo.body2">Keep your product listings updated with current prices</MudText>
                    </MudListItem>
                    <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle">
                        <MudText Typo="Typo.body2">Respond to buyer inquiries within 24 hours</MudText>
                    </MudListItem>
                    <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle">
                        <MudText Typo="Typo.body2">Upload high-quality product images</MudText>
                    </MudListItem>
                    <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle">
                        <MudText Typo="Typo.body2">Maintain accurate inventory levels</MudText>
                    </MudListItem>
                </MudList>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private int _myProductsCount = 0;
    private int _activeProductsCount = 0;
    private int _connectedBuyers = 0;
    private int _newBuyersThisWeek = 0;
    private int _pendingQuotes = 3; // Placeholder
    private int _productViews = 0;
    private List<Product> _topProducts = new();
    private List<Product> _lowStockProducts = new();
    private string? _currentUserEmail;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get current user
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            _currentUserEmail = authState.User?.Identity?.Name;

            // Get supplier's products (would need proper user association)
            _myProductsCount = await DbContext.Products.CountAsync();
            _activeProductsCount = await DbContext.Products.Where(p => p.IsActive).CountAsync();
            
            // Get connected buyers
            _connectedBuyers = await DbContext.Buyers.CountAsync();
            
            // Get new buyers this week
            var weekAgo = DateTime.UtcNow.AddDays(-7);
            _newBuyersThisWeek = await DbContext.Buyers
                .Where(b => b.CreatedAt >= weekAgo)
                .CountAsync();

            // Placeholder for views (would need tracking)
            _productViews = 150;

            // Get top products
            _topProducts = await DbContext.Products
                .Where(p => p.IsActive)
                .OrderByDescending(p => p.Price) // Would use actual performance metrics
                .Take(5)
                .ToListAsync();

            // Get low stock products
            _lowStockProducts = await DbContext.Products
                .Where(p => p.IsActive && p.StockQuantity < 50) // Arbitrary threshold
                .Take(3)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Database error: {ex.Message}");
        }
    }
}