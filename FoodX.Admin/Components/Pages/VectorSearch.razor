@page "/vector-search"
@using FoodX.Core.Services
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject IVectorSearchService VectorSearchService
@inject IEmbeddingService EmbeddingService
@inject ILogger<VectorSearch> Logger
@inject ISnackbar Snackbar

<PageTitle>Vector Search</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h3" Class="mb-4">
        <MudIcon Icon="@Icons.Material.Filled.Search" Class="mr-2" />
        Vector Search Demo
    </MudText>

    <MudAlert Severity="Severity.Info" Class="mb-4">
        This page demonstrates semantic vector search capabilities. Enter a natural language query to find similar products or companies.
    </MudAlert>

    <MudGrid>
        <MudItem xs="12" md="6">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Class="mb-3">Product Search</MudText>
                    
                    <MudTextField @bind-Value="productQuery" 
                                  Label="Search Products" 
                                  Variant="Variant.Outlined"
                                  FullWidth="true"
                                  Class="mb-3"
                                  Placeholder="e.g., 'organic vegetables from Europe'" />
                    
                    <MudGrid>
                        <MudItem xs="6">
                            <MudNumericField @bind-Value="productTopN" 
                                           Label="Results" 
                                           Min="1" 
                                           Max="50" 
                                           Variant="Variant.Outlined" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudNumericField T="float" @bind-Value="productMinSimilarity" 
                                           Label="Min Similarity" 
                                           Min="0.0f" 
                                           Max="1.0f" 
                                           Step="0.1f"
                                           Variant="Variant.Outlined" />
                        </MudItem>
                    </MudGrid>
                    
                    <MudButton Color="Color.Primary" 
                             Variant="Variant.Filled" 
                             OnClick="SearchProducts"
                             Disabled="@isSearching"
                             FullWidth="true"
                             Class="mt-3">
                        @if (isSearching)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Search" Class="mr-2" />
                        }
                        Search Products
                    </MudButton>
                </MudCardContent>
            </MudCard>

            @if (productResults.Any())
            {
                <MudCard Class="mt-4">
                    <MudCardContent>
                        <MudText Typo="Typo.h6" Class="mb-3">
                            Product Results (@productResults.Count)
                        </MudText>
                        
                        <MudList T="string">
                            @foreach (var result in productResults)
                            {
                                <MudListItem T="string" Value="@result.EntityName">
                                    <MudGrid>
                                        <MudItem xs="8">
                                            <MudText Typo="Typo.subtitle1">@result.EntityName</MudText>
                                            <MudText Typo="Typo.body2" Color="Color.Secondary">
                                                @result.EntityDescription
                                            </MudText>
                                        </MudItem>
                                        <MudItem xs="4" Class="text-right">
                                            <MudChip T="string" Color="Color.Primary" Size="Size.Small">
                                                @($"{result.Similarity:P0}")
                                            </MudChip>
                                        </MudItem>
                                    </MudGrid>
                                </MudListItem>
                                <MudDivider />
                            }
                        </MudList>
                    </MudCardContent>
                </MudCard>
            }
        </MudItem>

        <MudItem xs="12" md="6">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Class="mb-3">Company Search</MudText>
                    
                    <MudTextField @bind-Value="companyQuery" 
                                  Label="Search Companies" 
                                  Variant="Variant.Outlined"
                                  FullWidth="true"
                                  Class="mb-3"
                                  Placeholder="e.g., 'organic food suppliers'" />
                    
                    <MudGrid>
                        <MudItem xs="6">
                            <MudNumericField @bind-Value="companyTopN" 
                                           Label="Results" 
                                           Min="1" 
                                           Max="50" 
                                           Variant="Variant.Outlined" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudNumericField T="float" @bind-Value="companyMinSimilarity" 
                                           Label="Min Similarity" 
                                           Min="0.0f" 
                                           Max="1.0f" 
                                           Step="0.1f"
                                           Variant="Variant.Outlined" />
                        </MudItem>
                    </MudGrid>
                    
                    <MudButton Color="Color.Secondary" 
                             Variant="Variant.Filled" 
                             OnClick="SearchCompanies"
                             Disabled="@isSearching"
                             FullWidth="true"
                             Class="mt-3">
                        @if (isSearching)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Search" Class="mr-2" />
                        }
                        Search Companies
                    </MudButton>
                </MudCardContent>
            </MudCard>

            @if (companyResults.Any())
            {
                <MudCard Class="mt-4">
                    <MudCardContent>
                        <MudText Typo="Typo.h6" Class="mb-3">
                            Company Results (@companyResults.Count)
                        </MudText>
                        
                        <MudList T="string">
                            @foreach (var result in companyResults)
                            {
                                <MudListItem T="string" Value="@result.EntityName">
                                    <MudGrid>
                                        <MudItem xs="8">
                                            <MudText Typo="Typo.subtitle1">@result.EntityName</MudText>
                                            <MudText Typo="Typo.body2" Color="Color.Secondary">
                                                @result.EntityDescription
                                            </MudText>
                                        </MudItem>
                                        <MudItem xs="4" Class="text-right">
                                            <MudChip T="string" Color="Color.Secondary" Size="Size.Small">
                                                @($"{result.Similarity:P0}")
                                            </MudChip>
                                        </MudItem>
                                    </MudGrid>
                                </MudListItem>
                                <MudDivider />
                            }
                        </MudList>
                    </MudCardContent>
                </MudCard>
            }
        </MudItem>
    </MudGrid>

    <MudCard Class="mt-4">
        <MudCardContent>
            <MudText Typo="Typo.h6" Class="mb-3">How Vector Search Works</MudText>
            <MudText Typo="Typo.body1" Class="mb-2">
                Vector search uses AI embeddings to find semantically similar items:
            </MudText>
            <MudList T="string">
                <MudListItem Icon="@Icons.Material.Filled.Check">
                    Text is converted to high-dimensional vectors (embeddings) using AI models
                </MudListItem>
                <MudListItem Icon="@Icons.Material.Filled.Check">
                    Similarity is calculated using cosine distance between vectors
                </MudListItem>
                <MudListItem Icon="@Icons.Material.Filled.Check">
                    Results are ranked by semantic similarity, not just keyword matching
                </MudListItem>
                <MudListItem Icon="@Icons.Material.Filled.Check">
                    Understands context and meaning, not just exact matches
                </MudListItem>
            </MudList>
            
            <MudAlert Severity="Severity.Warning" Class="mt-3">
                <strong>Note:</strong> To use vector search, you need to configure Azure OpenAI or OpenAI API credentials in appsettings.json and generate embeddings for your data.
            </MudAlert>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private string productQuery = "";
    private string companyQuery = "";
    private int productTopN = 10;
    private int companyTopN = 10;
    private float productMinSimilarity = 0.5f;
    private float companyMinSimilarity = 0.5f;
    private bool isSearching = false;
    
    private List<VectorSearchResult> productResults = new();
    private List<VectorSearchResult> companyResults = new();

    private async Task SearchProducts()
    {
        if (string.IsNullOrWhiteSpace(productQuery))
        {
            Snackbar.Add("Please enter a search query", Severity.Warning);
            return;
        }

        isSearching = true;
        productResults.Clear();

        try
        {
            // Generate embedding for the query
            var embedding = await EmbeddingService.GetEmbeddingAsync(productQuery);
            
            if (embedding == null)
            {
                Snackbar.Add("Failed to generate embedding. Please check your OpenAI configuration.", Severity.Error);
                return;
            }

            // Perform vector search
            productResults = await VectorSearchService.SearchAsync(
                "Product",
                "combined",
                embedding,
                productTopN,
                productMinSimilarity
            );

            if (productResults.Any())
            {
                Snackbar.Add($"Found {productResults.Count} matching products", Severity.Success);
            }
            else
            {
                Snackbar.Add("No products found matching your query", Severity.Info);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error searching products");
            Snackbar.Add("An error occurred while searching", Severity.Error);
        }
        finally
        {
            isSearching = false;
        }
    }

    private async Task SearchCompanies()
    {
        if (string.IsNullOrWhiteSpace(companyQuery))
        {
            Snackbar.Add("Please enter a search query", Severity.Warning);
            return;
        }

        isSearching = true;
        companyResults.Clear();

        try
        {
            // Generate embedding for the query
            var embedding = await EmbeddingService.GetEmbeddingAsync(companyQuery);
            
            if (embedding == null)
            {
                Snackbar.Add("Failed to generate embedding. Please check your OpenAI configuration.", Severity.Error);
                return;
            }

            // Perform vector search
            companyResults = await VectorSearchService.SearchAsync(
                "Company",
                "combined",
                embedding,
                companyTopN,
                companyMinSimilarity
            );

            if (companyResults.Any())
            {
                Snackbar.Add($"Found {companyResults.Count} matching companies", Severity.Success);
            }
            else
            {
                Snackbar.Add("No companies found matching your query", Severity.Info);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error searching companies");
            Snackbar.Add("An error occurred while searching", Severity.Error);
        }
        finally
        {
            isSearching = false;
        }
    }
}