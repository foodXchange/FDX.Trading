@page "/suppliers"
@using FoodX.Admin.Data
@using FoodX.Admin.Models
@using Microsoft.EntityFrameworkCore
@using FoodX.Admin.Components.Dialogs
@inject FoodXDbContext DbContext
@inject IDialogService DialogService
@rendermode InteractiveServer

<PageTitle>Suppliers</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h3" Class="mb-4">Suppliers Management</MudText>
    
    <MudPaper Class="pa-4 mb-4">
        <MudGrid>
            <MudItem xs="12" md="9">
                <MudTextField @bind-Value="searchTerm" Label="Search Suppliers" 
                              Variant="Variant.Outlined" 
                              Adornment="Adornment.Start" 
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              Immediate="true" />
            </MudItem>
            <MudItem xs="12" md="3">
                <MudButton Variant="Variant.Filled" Color="Color.Success" 
                           StartIcon="@Icons.Material.Filled.PersonAdd" 
                           FullWidth="true"
                           OnClick="OpenAddSupplierDialog">
                    Add Supplier
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>

    @if (isLoading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
    }
    else if (suppliers.Any())
    {
        <MudGrid>
            @foreach (var supplier in suppliers)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderAvatar>
                                <MudAvatar Color="Color.Success">
                                    @supplier.User.FirstName.Substring(0, 1)@supplier.User.LastName.Substring(0, 1)
                                </MudAvatar>
                            </CardHeaderAvatar>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@supplier.User.FullName</MudText>
                                <MudText Typo="Typo.body2">@supplier.SupplierType</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton Icon="@Icons.Material.Filled.MoreVert" />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Typo="Typo.body2">
                                <MudIcon Icon="@Icons.Material.Filled.Email" Size="Size.Small" /> @supplier.User.Email
                            </MudText>
                            <MudText Typo="Typo.body2" Class="mt-2">
                                <MudIcon Icon="@Icons.Material.Filled.Business" Size="Size.Small" /> 
                                @(supplier.Company?.Name ?? "No Company")
                            </MudText>
                            <MudText Typo="Typo.body2" Class="mt-2">
                                <MudIcon Icon="@Icons.Material.Filled.DateRange" Size="Size.Small" /> 
                                Joined: @supplier.CreatedAt.ToString("MMM dd, yyyy")
                            </MudText>
                            <div class="mt-3">
                                <MudChip T="string" Color="@(supplier.User.IsActive ? Color.Success : Color.Error)" 
                                         Size="Size.Small">
                                    @(supplier.User.IsActive ? "Active" : "Inactive")
                                </MudChip>
                                <MudChip T="string" Color="Color.Success" Size="Size.Small">
                                    Supplier
                                </MudChip>
                            </div>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Text" Color="Color.Primary" Size="Size.Small">View Profile</MudButton>
                            <MudButton Variant="Variant.Text" Color="Color.Primary" Size="Size.Small">Edit</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
    else
    {
        <MudAlert Severity="Severity.Info">No suppliers found. Click "Add Supplier" to register new suppliers.</MudAlert>
    }
</MudContainer>

@code {
    private List<Supplier> suppliers = new();
    private bool isLoading = true;
    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadSuppliers();
    }

    private async Task LoadSuppliers()
    {
        isLoading = true;
        try
        {
            var query = DbContext.Suppliers
                .Include(s => s.User)
                .Include(s => s.Company)
                .AsQueryable();
            
            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                query = query.Where(s => 
                    s.User.FirstName.Contains(searchTerm) || 
                    s.User.LastName.Contains(searchTerm) ||
                    s.User.Email.Contains(searchTerm) ||
                    (s.SupplierType != null && s.SupplierType.Contains(searchTerm)));
            }
            
            suppliers = await query.OrderBy(s => s.User.FirstName).ToListAsync();
        }
        catch (Exception)
        {
            // Log error
            suppliers = new List<Supplier>();
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task OpenAddSupplierDialog()
    {
        var options = new DialogOptions 
        { 
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };
        
        var dialog = await DialogService.ShowAsync<AddSupplierDialog>("Add New Supplier", options);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            await LoadSuppliers();
        }
    }
}