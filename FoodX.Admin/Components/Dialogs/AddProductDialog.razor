@using FoodX.Admin.Models
@using FoodX.Admin.Data
@using MudBlazor
@using Microsoft.AspNetCore.Components.Web
@inject FoodXDbContext DbContext
@inject ISnackbar Snackbar

<div @onkeydown="HandleKeyDown" @onkeydown:preventDefault="false">
<MudDialog>
    <DialogContent>
        <MudTextField @bind-Value="productName" Label="Product Name" Required="true" Variant="Variant.Outlined" Class="mb-3" />
        <MudSelect @bind-Value="category" Label="Category" Required="true" Variant="Variant.Outlined" Class="mb-3">
            <MudSelectItem Value="@("Fruits")">Fruits</MudSelectItem>
            <MudSelectItem Value="@("Vegetables")">Vegetables</MudSelectItem>
            <MudSelectItem Value="@("Dairy")">Dairy</MudSelectItem>
            <MudSelectItem Value="@("Meat")">Meat</MudSelectItem>
            <MudSelectItem Value="@("Seafood")">Seafood</MudSelectItem>
            <MudSelectItem Value="@("Grains")">Grains</MudSelectItem>
            <MudSelectItem Value="@("Beverages")">Beverages</MudSelectItem>
            <MudSelectItem Value="@("Snacks")">Snacks</MudSelectItem>
            <MudSelectItem Value="@("Other")">Other</MudSelectItem>
        </MudSelect>
        <MudTextField @bind-Value="description" Label="Description" Variant="Variant.Outlined" Lines="3" Class="mb-3" />
        <MudNumericField @bind-Value="price" Label="Price" Required="true" Variant="Variant.Outlined" 
                         Format="F2" Adornment="Adornment.Start" AdornmentText="$" Class="mb-3" />
        <MudTextField @bind-Value="unit" Label="Unit" Required="true" Variant="Variant.Outlined" 
                      HelperText="e.g., kg, lb, piece, dozen" Class="mb-3" />
        <MudNumericField @bind-Value="minOrderQuantity" Label="Minimum Order Quantity" Variant="Variant.Outlined" Class="mb-3" />
        <MudNumericField @bind-Value="stockQuantity" Label="Stock Quantity" Variant="Variant.Outlined" Class="mb-3" />
        <MudTextField @bind-Value="sku" Label="SKU" Variant="Variant.Outlined" Class="mb-3" />
        <MudTextField @bind-Value="origin" Label="Origin/Source" Variant="Variant.Outlined" Class="mb-3" />
        <MudSwitch T="bool" @bind-Value="isOrganic" Label="Organic" Color="Color.Success" Class="mb-3" />
        <MudSwitch T="bool" @bind-Value="isAvailable" Label="Available" Color="Color.Primary" Class="mb-3" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit" Disabled="@isProcessing">
            @if (isProcessing)
            {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
            }
            Add Product
        </MudButton>
    </DialogActions>
</MudDialog>
</div>

@code {
    [Parameter] public EventCallback<Product> OnProductAdded { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    
    private string productName = "";
    private string category = "";
    private string description = "";
    private decimal price = 0;
    private string unit = "";
    private int minOrderQuantity = 1;
    private int stockQuantity = 0;
    private string sku = "";
    private string origin = "";
    private bool isOrganic = false;
    private bool isAvailable = true;
    private bool isProcessing = false;
    
    private async Task Cancel()
    {
        await OnCancel.InvokeAsync();
    }
    
    private async Task Submit()
    {
        if (string.IsNullOrWhiteSpace(productName) || string.IsNullOrWhiteSpace(category) || 
            price <= 0 || string.IsNullOrWhiteSpace(unit))
        {
            Snackbar.Add("Please fill in all required fields", Severity.Warning);
            return;
        }
        
        isProcessing = true;
        
        try
        {
            // Create the product
            var product = new Product
            {
                Name = productName,
                Category = category,
                Description = description,
                Price = price,
                Unit = unit,
                MinOrderQuantity = minOrderQuantity,
                StockQuantity = stockQuantity,
                SKU = sku,
                Origin = origin,
                IsOrganic = isOrganic,
                IsAvailable = isAvailable,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            };
            
            DbContext.Products.Add(product);
            await DbContext.SaveChangesAsync();
            
            Snackbar.Add("Product added successfully", Severity.Success);
            await OnProductAdded.InvokeAsync(product);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error adding product: {ex.Message}", Severity.Error);
        }
        finally
        {
            isProcessing = false;
        }
    }
    
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Escape")
        {
            await Cancel();
        }
        else if (e.CtrlKey && e.Key == "s")
        {
            await Submit();
        }
    }
}