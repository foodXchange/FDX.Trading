@page "/Account/MagicLinkLogin"
@using Microsoft.AspNetCore.Identity
@using FoodX.Admin.Data
@using FoodX.Admin.Services

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IMagicLinkService MagicLinkService
@inject IRoleNavigationService RoleNavigationService
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<MagicLinkLogin> Logger

<PageTitle>Signing in... - FoodX</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-8">
    <MudCard Elevation="0" Class="pa-8" Style="border: 1px solid #e0e0e0;">
        <MudCardContent>
            <div class="text-center">
                @if (isProcessing)
                {
                    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                    <MudText Typo="Typo.h5" Class="mt-4">Signing you in...</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mt-2">
                        Please wait while we verify your magic link
                    </MudText>
                }
                else if (success)
                {
                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Large" Color="Color.Success" />
                    <MudText Typo="Typo.h5" Class="mt-4">Success!</MudText>
                    <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mt-2">
                        You have been successfully signed in. Redirecting...
                    </MudText>
                }
                else
                {
                    <MudIcon Icon="@Icons.Material.Filled.Error" Size="Size.Large" Color="Color.Error" />
                    <MudText Typo="Typo.h5" Class="mt-4">Invalid or Expired Link</MudText>
                    <MudAlert Severity="Severity.Error" Class="mt-4">
                        @errorMessage
                    </MudAlert>
                    
                    <MudGrid Class="mt-4">
                        <MudItem xs="12">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                                       Href="/Account/MagicLink" FullWidth="true">
                                Request New Magic Link
                            </MudButton>
                        </MudItem>
                        <MudItem xs="12">
                            <MudButton Variant="Variant.Outlined" Color="Color.Default" 
                                       Href="/Account/Login" FullWidth="true">
                                Sign In with Password
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                }
            </div>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private bool isProcessing = true;
    private bool success = false;
    private string errorMessage = "This link is invalid or has expired.";

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? Token { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await ProcessMagicLink();
    }

    private async Task ProcessMagicLink()
    {
        try
        {
            if (string.IsNullOrEmpty(Email) || string.IsNullOrEmpty(Token))
            {
                errorMessage = "Invalid magic link. Required parameters are missing.";
                isProcessing = false;
                return;
            }

            // Validate the magic link token
            var isValid = await MagicLinkService.ValidateMagicLinkTokenAsync(Email, Token);
            if (!isValid)
            {
                errorMessage = "This magic link is invalid or has already been used. Please request a new one.";
                isProcessing = false;
                return;
            }

            // Get the user
            var user = await UserManager.FindByEmailAsync(Email);
            if (user == null)
            {
                errorMessage = "User account not found.";
                isProcessing = false;
                return;
            }

            // Sign in the user
            await SignInManager.SignInAsync(user, isPersistent: false);
            Logger.LogInformation($"User {Email} signed in via magic link");

            success = true;
            isProcessing = false;

            // Wait a moment to show success message
            await Task.Delay(1500);

            // Redirect to appropriate dashboard
            if (string.IsNullOrEmpty(ReturnUrl) || ReturnUrl == "/")
            {
                var principal = await SignInManager.CreateUserPrincipalAsync(user);
                var dashboardUrl = await RoleNavigationService.GetRoleBasedDashboardUrl(principal);
                RedirectManager.RedirectTo(dashboardUrl);
            }
            else
            {
                RedirectManager.RedirectTo(ReturnUrl);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error processing magic link for {Email}");
            errorMessage = "An error occurred while signing you in. Please try again.";
            isProcessing = false;
        }
    }
}